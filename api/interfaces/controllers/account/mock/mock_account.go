// Code generated by MockGen. DO NOT EDIT.
// Source: account_interactor.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/kory-jp/vue_go/api/domain/account"
)

// MockAccountInteractor is a mock of AccountInteractor interface.
type MockAccountInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAccountInteractorMockRecorder
}

// MockAccountInteractorMockRecorder is the mock recorder for MockAccountInteractor.
type MockAccountInteractorMockRecorder struct {
	mock *MockAccountInteractor
}

// NewMockAccountInteractor creates a new mock instance.
func NewMockAccountInteractor(ctrl *gomock.Controller) *MockAccountInteractor {
	mock := &MockAccountInteractor{ctrl: ctrl}
	mock.recorder = &MockAccountInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountInteractor) EXPECT() *MockAccountInteractorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAccountInteractor) Add(arg0 domain.Account) (*domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockAccountInteractorMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAccountInteractor)(nil).Add), arg0)
}
